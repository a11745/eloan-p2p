<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xmg.p2p.business.mapper.MoneyWithdrawMapper" >
  <resultMap id="BaseResultMap" type="com.xmg.p2p.business.domain.MoneyWithdraw" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="accountNumber" property="accountNumber" jdbcType="VARCHAR" />
    <result column="forkName" property="forkName" jdbcType="VARCHAR" />
    <result column="bankName" property="bankName" jdbcType="VARCHAR" />
    <result column="accountName" property="accountName" jdbcType="VARCHAR" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="state" property="state" jdbcType="TINYINT" />
    <result column="chargeFee" property="chargeFee" jdbcType="DECIMAL" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="auditTime" property="auditTime" jdbcType="TIMESTAMP" />
    <result column="applyTime" property="applyTime" jdbcType="TIMESTAMP" />
  
   <association property="applier" javaType="com.xmg.p2p.base.domain.Logininfo" columnPrefix="ap_">
    	<id column="id" property="id"/>
    	<result column="username" property="username"/>
    </association>
    
    <association property="auditor" javaType="com.xmg.p2p.base.domain.Logininfo" columnPrefix="au_">
    	<id column="id" property="id"/>
    	<result column="username" property="username"/>
    </association>
  </resultMap>
  
  
  
  <sql id="base_column">
  	m.id, m.accountNumber, m.forkName, m.bankName, m.accountName, m.amount, m.state, m.chargeFee, 
    m.remark, m.auditTime, m.applyTime,ap.id as ap_id ,ap.username as ap_username ,	au.id as au_id ,au.username as au_username
  </sql>
  
 <sql id="base_table">
 	moneywithdraw m JOIN logininfo ap ON m.applier_id = ap.id
    LEFT JOIN logininfo au ON m.auditor_id =au.id
 </sql>
  
   <!-- 高级查询的条件 -->
  <sql id="condition">
	  <where>
	  	<if test="state>-1">
	  		AND m.state = #{state} 
	  	</if>
	  	<if test="beginDate!=null">
	  		AND m.applyTime &gt;= #{beginDate}
	  	</if>
	  	<if test="endDate!=null">
	  		AND m.applyTime &lt;= #{endDate}
	  	</if>
	  </where>
  </sql>

  <insert id="insert" parameterType="com.xmg.p2p.business.domain.MoneyWithdraw" useGeneratedKeys="true" keyProperty="id" >
    insert into moneywithdraw (accountNumber, forkName, bankName, 
      accountName, amount, state,  chargeFee, remark, auditTime,  applyTime, auditor_id, applier_id)
    values (#{accountNumber,jdbcType=VARCHAR}, #{forkName,jdbcType=VARCHAR}, #{bankName,jdbcType=VARCHAR}, 
      #{accountName,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL}, #{state,jdbcType=TINYINT}, 
      #{chargeFee,jdbcType=DECIMAL}, #{remark,jdbcType=VARCHAR}, #{auditTime,jdbcType=TIMESTAMP}, 
      #{applyTime,jdbcType=TIMESTAMP}, #{auditor.id,jdbcType=BIGINT}, #{applier.id,jdbcType=BIGINT} )
  </insert>
  
  <update id="updateByPrimaryKey" parameterType="com.xmg.p2p.business.domain.MoneyWithdraw" >
    update moneywithdraw
    set accountNumber = #{accountNumber,jdbcType=VARCHAR},
      forkName = #{forkName,jdbcType=VARCHAR},
      bankName = #{bankName,jdbcType=VARCHAR},
      accountName = #{accountName,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      state = #{state,jdbcType=TINYINT},
      chargeFee = #{chargeFee,jdbcType=DECIMAL},
      remark = #{remark,jdbcType=VARCHAR},
      auditTime = #{auditTime,jdbcType=TIMESTAMP},
      applyTime = #{applyTime,jdbcType=TIMESTAMP},
      auditor_id = #{auditor.id,jdbcType=BIGINT},
      applier_id = #{applier.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" >
    select <include refid="base_column" />
    from  <include refid="base_table"></include>
    where m.id = #{id,jdbcType=BIGINT}
  </select>
  
  <select id="queryForCount" resultType="int">
   select count(m.id)
   from moneywithdraw m 
   <include refid="condition" />
  </select>
  
  <select id="query" resultMap="BaseResultMap">
    SELECT <include refid="base_column" />
    from <include refid="base_table" />
    <include refid="condition" />
    limit #{start} , #{pageSize} 
   </select>
  
 
</mapper>